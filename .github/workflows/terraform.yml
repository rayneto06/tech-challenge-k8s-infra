name: Terraform Cluster and Infra Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job para verificação do terraform do cluster em pull requests e merge para a main e push para EKS na main 
  cluster:
    name: Terraform Verification and Push Cluster to EKS
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      # Inicializar, validar e aplicar o Terraform para o diretório cluster

      - name: Initialize Terraform for Cluster
        working-directory: terraform/cluster
        run: terraform init

      - name: Validate Terraform for Cluster
        working-directory: terraform/cluster
        run: terraform validate

      - name: Plan Terraform for Cluster
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        working-directory: terraform/cluster
        run: terraform plan -out=tfplan-cluster

      - name: Apply Terraform for Cluster
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        working-directory: terraform/cluster
        run: |
          EXISTS=$(aws eks describe-cluster --name fiap-tech-challenge-eks-cluster --region us-east-1 --query 'cluster.name' --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$EXISTS" == "NOT_FOUND" ]; then
            echo "Cluster não encontrado. Aplicando configurações com Terraform."
            terraform apply -auto-approve tfplan-cluster
          else
            echo "Cluster já existe. Pulando criação."
          fi

      - name: Wait for EKS Cluster to be Ready
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        run: |
          echo "Aguardando o cluster estar ativo..."
          aws eks wait cluster-active --name fiap-tech-challenge-eks-cluster --region us-east-1

      - name: Update kubeconfig for EKS
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        run: aws eks update-kubeconfig --name fiap-tech-challenge-eks-cluster --region us-east-1

  # Job para verificação do terraform do infra em pull requests e merge para a main e push para EKS na main 
  infra:
    name: Terraform Verification and Push Infrastructure and to Cluster
    runs-on: ubuntu-latest

    needs: cluster

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      # Inicializar, validar e aplicar o Terraform para o diretório infra

      - name: Import any existing ALB/NLB SGs & TGs into state
        working-directory: terraform/infra
        env:
          AWS_REGION: us-east-1
        run: |
          # helper to import if the AWS resource actually exists
          import_if_exists () {
            local TYPE=$1     # e.g. aws_security_group.alb_sg
            local LOOKUP=$2   # aws cli filter command
            local ID
            ID=$(aws ec2 describe-security-groups \
                  --region $AWS_REGION \
                  --filters "${LOOKUP}" \
                  --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null)
            if [[ "$ID" != "None" && -n "$ID" ]]; then
              echo "Importing $TYPE => $ID"
              terraform init -input=false
              terraform import -lock=false $TYPE $ID || true
            fi
          }
          # ALB SG
          import_if_exists aws_security_group.alb_sg 'Name=group-name,Values=tech-challenge-alb-sg'
          # NLB SG
          import_if_exists aws_security_group.nlb_sg 'Name=group-name,Values=tech-challenge-nlb-sg'

          # same idea for Target Groups (use aws elbv2 describe-target-groups)
          TG_ARN=$(aws elbv2 describe-target-groups \
                    --region $AWS_REGION \
                    --names tech-challenge-alb-tg \
                    --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null)
          if [[ -n "$TG_ARN" && "$TG_ARN" != "None" ]]; then
            echo "Importing aws_lb_target_group.alb_target_group => $TG_ARN"
            terraform import -lock=false aws_lb_target_group.alb_target_group $TG_ARN || true
          fi

          TG_ARN=$(aws elbv2 describe-target-groups \
                    --region $AWS_REGION \
                    --names tech-challenge-nlb-tg \
                    --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null)
          if [[ -n "$TG_ARN" && "$TG_ARN" != "None" ]]; then
            echo "Importing aws_lb_target_group.nlb_target_group => $TG_ARN"
            terraform import -lock=false aws_lb_target_group.nlb_target_group $TG_ARN || true
          fi

      - name: Initialize Terraform for Infra
        working-directory: terraform/infra
        run: terraform init

      - name: Validate Terraform for Infra
        working-directory: terraform/infra
        run: terraform validate

      - name: Plan Terraform for Infra
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        working-directory: terraform/infra
        run: terraform plan -out=tfplan-infra

      - name: Apply Terraform for Infra
        if: github.ref == 'refs/heads/main' # Executa apenas na branch main
        working-directory: terraform/infra
        run: terraform apply -auto-approve tfplan-infra